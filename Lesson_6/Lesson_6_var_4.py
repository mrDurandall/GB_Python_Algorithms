# Вариант 4 - Вариант с сохранением вводимых чисел в список.

# Сразу импортируем sys для подсчета использованной памяти и randint для использования при тестировании
import sys
from random import randint


def printtotalsize(*objects):
    """
    Функция для подсчета памяти, используемой объектами, переданными в качестве аргументов.
    Получает список объектов, выводит содержимое каждого, его тип и занимаемый объем памяти.
    Если объект - список или кортеж, ркурсивно вызывает сама себя для содержимого данного объекта.
    """
    total_size = 0
    for obj in objects:
        spam = sys.getsizeof(obj)
        total_size += spam
        print(f'{obj} : {type(obj)} : {spam:>10}')
        if type(obj) == list or type(obj) == tuple:
            printtotalsize(*obj)
        if type(obj) == dict:
            printtotalsize(*(list(obj.keys()) + list(obj.values())))
    print(f'Суммарный объем использованной памяти: {total_size}')

BASE = 10

# Для тестирования жестко зададим колчиество чисел и искомое число
# num = int(input("Введите количество чисел: "))
# digit = int(input("Какую цифру подсчитать: "))
num = 100
numbers = []
for i in range(1, num + 1):
    # numbers.append(input(f'Введите число {i}: '))
    numbers.append(randint(1, 500))
digit = 5
count = 0
for i in numbers:
    spam = i
    while spam > 0:
        if spam % BASE == digit:
            count += 1
        spam //= BASE  # ans = ans // 10

print(f'Было введено {count} цифр {digit}')

# Для получения списка используемых объектов применим print(locals())
# {... 'BASE': 10, 'num': 100,
# 'numbers': [300, 357, 208, 189, 260, 363, 36, 86, 474, 25, 425, 349, 14, 38, 315, 442, 89, 445, 99, 468, 424, 34,
# 91, 467, 355, 470, 338, 203, 211, 399, 475, 90, 318, 366, 380, 133, 383, 3, 482, 330, 258, 163, 402, 385, 137, 336,
# 281, 171, 10, 90, 98, 212, 291, 116, 342, 272, 366, 361, 440, 480, 359, 151, 7, 116, 54, 408, 277, 309, 127, 161,
# 265, 327, 341, 76, 403, 132, 120, 167, 457, 471, 184, 388, 166, 200, 483, 51, 381, 69, 147, 236, 401, 49, 396, 197,
# 315, 423, 464, 366, 373, 270], 'i': 270, 'digit': 5, 'count': 17, 'spam': 0},

# Измерим память, используемую данными переменными:
# printtotalsize(BASE, num, numbers, i, digit, count, spam)
# Результат подсчетов:

# 10 : <class 'int'> :         28
# 100 : <class 'int'> :         28
# [395, 44, 228, 449, 234, 430, 453, 341, 487, 67, 45, 324, 356, 318, 75, 55, 26, 151, 384, 192, 232, 18, 65, 151,
# 331, 277, 500, 259, 323, 14, 77, 23, 153, 3, 131, 8, 394, 465, 497, 264, 406, 317, 244, 283, 443, 154, 391, 373,
# 6, 393, 14, 322, 491, 431, 34, 315, 208, 392, 473, 102, 73, 436, 109, 106, 213, 87, 87, 155, 456, 267, 188, 60,
# 299, 92, 459, 13, 266, 6, 335, 107, 97, 40, 373, 79, 192, 232, 108, 336, 483, 274, 400, 279, 310, 340, 436, 242,
# 141, 344, 154, 391] : <class 'list'> :        920
# 395 : <class 'int'> :         28
# 44 : <class 'int'> :         28
# 228 : <class 'int'> :         28
# 449 : <class 'int'> :         28
# 234 : <class 'int'> :         28
# 430 : <class 'int'> :         28
# 453 : <class 'int'> :         28
# 341 : <class 'int'> :         28
# 487 : <class 'int'> :         28
# 67 : <class 'int'> :         28
# 45 : <class 'int'> :         28
# 324 : <class 'int'> :         28
# 356 : <class 'int'> :         28
# 318 : <class 'int'> :         28
# 75 : <class 'int'> :         28
# 55 : <class 'int'> :         28
# 26 : <class 'int'> :         28
# 151 : <class 'int'> :         28
# 384 : <class 'int'> :         28
# 192 : <class 'int'> :         28
# 232 : <class 'int'> :         28
# 18 : <class 'int'> :         28
# 65 : <class 'int'> :         28
# 151 : <class 'int'> :         28
# 331 : <class 'int'> :         28
# 277 : <class 'int'> :         28
# 500 : <class 'int'> :         28
# 259 : <class 'int'> :         28
# 323 : <class 'int'> :         28
# 14 : <class 'int'> :         28
# 77 : <class 'int'> :         28
# 23 : <class 'int'> :         28
# 153 : <class 'int'> :         28
# 3 : <class 'int'> :         28
# 131 : <class 'int'> :         28
# 8 : <class 'int'> :         28
# 394 : <class 'int'> :         28
# 465 : <class 'int'> :         28
# 497 : <class 'int'> :         28
# 264 : <class 'int'> :         28
# 406 : <class 'int'> :         28
# 317 : <class 'int'> :         28
# 244 : <class 'int'> :         28
# 283 : <class 'int'> :         28
# 443 : <class 'int'> :         28
# 154 : <class 'int'> :         28
# 391 : <class 'int'> :         28
# 373 : <class 'int'> :         28
# 6 : <class 'int'> :         28
# 393 : <class 'int'> :         28
# 14 : <class 'int'> :         28
# 322 : <class 'int'> :         28
# 491 : <class 'int'> :         28
# 431 : <class 'int'> :         28
# 34 : <class 'int'> :         28
# 315 : <class 'int'> :         28
# 208 : <class 'int'> :         28
# 392 : <class 'int'> :         28
# 473 : <class 'int'> :         28
# 102 : <class 'int'> :         28
# 73 : <class 'int'> :         28
# 436 : <class 'int'> :         28
# 109 : <class 'int'> :         28
# 106 : <class 'int'> :         28
# 213 : <class 'int'> :         28
# 87 : <class 'int'> :         28
# 87 : <class 'int'> :         28
# 155 : <class 'int'> :         28
# 456 : <class 'int'> :         28
# 267 : <class 'int'> :         28
# 188 : <class 'int'> :         28
# 60 : <class 'int'> :         28
# 299 : <class 'int'> :         28
# 92 : <class 'int'> :         28
# 459 : <class 'int'> :         28
# 13 : <class 'int'> :         28
# 266 : <class 'int'> :         28
# 6 : <class 'int'> :         28
# 335 : <class 'int'> :         28
# 107 : <class 'int'> :         28
# 97 : <class 'int'> :         28
# 40 : <class 'int'> :         28
# 373 : <class 'int'> :         28
# 79 : <class 'int'> :         28
# 192 : <class 'int'> :         28
# 232 : <class 'int'> :         28
# 108 : <class 'int'> :         28
# 336 : <class 'int'> :         28
# 483 : <class 'int'> :         28
# 274 : <class 'int'> :         28
# 400 : <class 'int'> :         28
# 279 : <class 'int'> :         28
# 310 : <class 'int'> :         28
# 340 : <class 'int'> :         28
# 436 : <class 'int'> :         28
# 242 : <class 'int'> :         28
# 141 : <class 'int'> :         28
# 344 : <class 'int'> :         28
# 154 : <class 'int'> :         28
# 391 : <class 'int'> :         28
# Суммарный объем использованной памяти: 2800
# 391 : <class 'int'> :         28
# 5 : <class 'int'> :         28
# 22 : <class 'int'> :         28
# 0 : <class 'int'> :         24
# Суммарный объем использованной памяти: 1084


# С учетом особенностей вывода функции printtotalsize суммарный объем памяти будет 2800 + 1084 = 3884 байта
# Объект список сам по себе занимает целых 920 байт, каждый его элемет также занимает по 28 байт.
# Плюс общие переменные программы.
# Объем памяти, занимаемой списком, напрямую зависит от его размера. При увеличении количества вводимых значений в 10 раз
# Объем занимаемой памяти также увеличивается в 10 раз.

